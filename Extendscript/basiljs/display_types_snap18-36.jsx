#includepath '~/Documents/;%USERPROFILE%Documents';#include 'basiljs/bundle/basil.js';/** * *  Ken Frederick *  ken.frederick@gmx.de * *  http://kennethfrederick.de/ *  http://blog.kennethfrederick.de/ * */// ------------------------------------------------------------------------//// Properties//// ------------------------------------------------------------------------// margins//var w = 6912;//var h = 6912;var w = 2592;var h = 3456;var left = 0;var top  = 0;//String poem = 'It is foolish\nto let a young redwood\ngrow next to a house.\nEven in this\none lifetime,\nyou will have to choose.\nThat great calm being,\nthis clutter of soup pots and books—\nAlready the first branch-tips brush at the window.\nSoftly, calmly, immensity taps at your life.';var poem = 'It is foolish to let a young redwood\ngrow next to a house. Even in this\none lifetime, you will have to\nchoose. That great calm being,\nthis clutter of soup pots\nand books— Already the\nfirst branch-tips\nbrush at the\nwindow. Softly,\ncalmly, immensity\ntaps at\nyour\nlife.';var lines;var typeface = {    size:    34,    leading: 36};// colorsvar background;var blue, green;// ------------------------------------------------------------------------//// Methods//// ------------------------------------------------------------------------//// Setup//(function setup() {})();//// Draw//function draw() {  var selection = b.selections();  for (var i=0; i<selection.length; i++) {        var item = selection[i];        b.itemSize(item, 36,36);        var y = snap(            b.itemY(item),            36        );        var x = snap(            b.itemX(item),            18        );        b.itemPosition(item, parseInt(x), parseInt(y));    }};// ------------------------------------------------------------------------function round(val, decimalPlaces) {    var multi = Math.pow(10,decimalPlaces);    return Math.round(val * multi)/multi;};function snap(val, snapInc, roundFunction) {    var roundFunction = roundFunction || Math.round;    return round( snapInc * roundFunction(val / snapInc), 2 );};// ------------------------------------------------------------------------//// Invocation//// ------------------------------------------------------------------------b.go();