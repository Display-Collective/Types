#includepath '~/Documents/;%USERPROFILE%Documents';#include 'basiljs/bundle/basil.js';/** * *  Ken Frederick *  ken.frederick@gmx.de * *  http://kennethfrederick.de/ *  http://blog.kennethfrederick.de/ * */// ------------------------------------------------------------------------//// Properties//// ------------------------------------------------------------------------// marginsvar left = 90;var top  = 108;// var poem = 'It is foolish\nto let a young redwood\ngrow next to a house.\nEven in this\none lifetime,\nyou will have to choose.\nThat great calm being,\nthis clutter of soup pots and books—\nAlready the first branch-tips brush at the window.\nSoftly, calmly, immensity taps at your life.';// var poem = 'It is foolish to let a young redwood\ngrow next to a house. Even in this\none lifetime, you will have to\nchoose. That great calm being,\nthis clutter of soup pots\nand books— Already the\nfirst branch-tips\nbrush at the\nwindow. Softly,\ncalmly, immensity\ntaps at\nyour\nlife.';var poem = 'It is\nfoolish to\nlet a young\nredwood grow next to a house. Even in this\none lifetime, you will have to\nchoose. That great calm being,\nthis clutter of soup pots\nand books— Already the\nfirst branch-tips\nbrush at the\nwindow. Softly,\ncalmly, immensity\ntaps at\nyour\nlife.';var lines;var typeface = {    size:    34,    leading: 36};// ------------------------------------------------------------------------//// Methods//// ------------------------------------------------------------------------//// Setup//(function setup() {    b.units( b.PT );    b.canvasMode( b.MARGIN );    b.rectMode( b.CORNER );    // insert spaces between all characters    var newPoem = '';    for (var i=0; i<poem.length; i++) {        if (poem[i] !== ' ') {            newPoem += ' ' + poem[i];        }    }    poem = newPoem;    lines = poem.split('\n');    // typeface    b.textFont('Theinhardt','Bold');    b.textSize(typeface.size);    b.textLeading(typeface.leading);})();//// Draw//function draw() {    b.fill(        b.color(0, 0, 00, 'Black')    );    var prevY = 0.0;    for (var i=0; i<lines.length; i++) {        // var l = b.map(i, 0, lines.length-1, lines.length-1, 0);        // var line = lines[l].trim();        var line = lines[i].trim();        var tY = Math.abs(i/(lines.length-1));        var easeY = new Ease().inQuad(tY);        var y = snap(            b.map(easeY, 0.0, 1.0, (36*0), (b.height*0.75)-top),            36        );        prevY = y;        if (y <= prevY) {            y += 36;        }        var words = line.split(' ');        var temp = [];        for (var j=0; j<words.length; j++) {            var word = words[j].trim();            var tX = Math.abs(j/(words.length-1));            var easeX = new Ease().inOutQuad(tX);            var scalar = (i < lines.length/2)                ? 1.0  //new Ease().outQuad(tY)                : 1.0; //new Ease().inQuad(1-tY);            var x = snap(                b.map(easeX, 0.0, 1.0, 0, (b.width*scalar)-(left/2)),                18            );            // draw text box            //      fill( background.get((int)x, (int)y) );            if (j <= 1 ) {                b.textAlign(Justification.LEFT_ALIGN, VerticalJustification.TOP_ALIGN);            }            else if (j >= words.length-1) {                b.textAlign(Justification.RIGHT_ALIGN, VerticalJustification.TOP_ALIGN);            }            else {                b.textAlign(Justification.CENTER_ALIGN, VerticalJustification.TOP_ALIGN);            }            temp.push( b.text(word, x, y, 36, typeface.leading) );        }        var group = b.group(temp, 'line_'+i);    }x};// ------------------------------------------------------------------------function round(val, decimalPlaces) {    var multi = Math.pow(10,decimalPlaces);    return Math.round(val * multi)/multi;};function snap(val, snapInc, roundFunction) {    var roundFunction = roundFunction || Math.round;    return round( snapInc * roundFunction(val / snapInc), 2 );};// ------------------------------------------------------------------------String.prototype.trimStart = function() {    return this.replace(/^\s\s*/, '');};String.prototype.trimEnd = function() {    return this.replace(/\s\s*$/, '');};String.prototype.trim = function() {    return this.trimStart().trimEnd();};// ------------------------------------------------------------------------var Ease = function() {    return {        /*         * see http://easings.net/de for visual examples         * of each spline method         */        linear: function(t) {            return t;        },        inQuad: function(t) {            return t*t;        },        outQuad: function(t) {            return t*(2-t);        },        inOutQuad: function(t) {            return t<0.5                ? 2*t*t                : -1+(4-2*t)*t;        },        // inOutQuad: function(t) {        //     t *= 2.0;        //     if (t < 1) {        //         return t*t/2.0;        //     }        //     else {        //         --t;        //         return -0.5 * (t*(t-2.0) - 1.0);        //     }        // },        inCubic: function(t) {            return t*t*t;        },        outCubic: function(t) {            return (--t)*t*t+1;        },        inOutCubic: function(t) {            return t<0.5                ? 4*t*t*t                : (t-1)*(2*t-2)*(2*t-2)+1;        },        inQuart: function(t) {            return t*t*t*t;        },        outQuart: function(t) {            return 1-(--t)*t*t*t;        },        inOutQuart: function(t) {            return t<0.5                ? 8*t*t*t*t                : 1-8*(--t)*t*t*t;        },        inQuint: function(t) {            return t*t*t*t*t;        },        outQuint: function(t) {            return 1+(--t)*t*t*t*t;        },        inOutQuint: function(t) {            return t<0.5                ? 16*t*t*t*t*t                : 1+16*(--t)*t*t*t*t;        },        inSine: function(t) {            return -1*Math.cos(t*(Math.PI/2))+1;        },        outSine: function(t) {            return 1*Math.sin(t*(Math.PI/2));        },        inOutSine: function(t) {            return -0.5*(Math.cos(Math.PI*t)-1);        },        inExpo: function(t) {            return 1*Math.pow(2, 10*(t-1));        },        outExpo: function(t) {            return 1*(-Math.pow(2, -10*t)+1 );        },        inOutExpo: function(t) {            t /= 0.5;            if (t < 1) return 0.5 * Math.pow(2, 10*(t-1));            t--;            return 0.5 * (-Math.pow(2, -10*t)+2);        },        inCirc: function(t) {            return -1*(Math.sqrt(1-t*t)-1);        },        outCirc: function(t) {            t--;            return 1*Math.sqrt(1-t*t);        },        inOutCirc: function(t) {            t /= 0.5;            if (t<1) {                return -0.5*(Math.sqrt(1-t*t)-1);            }            else {                t-=2; return 0.5*(Math.sqrt(1-t*t)+1);            }        }    };};// ------------------------------------------------------------------------//// Invocation//// ------------------------------------------------------------------------b.go();