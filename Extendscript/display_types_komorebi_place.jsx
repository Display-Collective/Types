/* * Display Types Komorebi Place * * Ken Frederick * ken.frederick@gmx.de * * http://kennethfrederick.de/ * http://blog.kennethfrederick.de/ * */// -----------------------------------------------------------------------------//// Properties//// -----------------------------------------------------------------------------var document = app.activeDocument;var width    = document.width;var height   = document.height;var layer    = document.layers['Layer 1'];var poem = 'He took me to this quiet wood, over a hill—it just opened up from nothing when we stepped between two trees. We were there all afternoon, eating fruit and sharing a bottle of something I\'d never bring, all nervous of each other. There\'s this Jane Hirshfield poem I keep thinking of\: It is foolish to let a young redwood grow next to a house. Even in this one lifetime, you will have to choose. That great calm being, this clutter of soup pots and books— Already the first branch-tips brush at the window. Softly, calmly, immensity taps at your life.';var words = [];// -----------------------------------------------------------------------------//// Methods//// -----------------------------------------------------------------------------function random(min, max) {    if (max === undefined) {        max = min;        min = 0;    }    return (min + Math.random() * (max - min));};// ------------------------------------------------------------------------function map(val, istart, istop, ostart, ostop) {    return ostart + (ostop - ostart) * ((val - istart) / (istop - istart));};function clamp(val, min, max) {    return (val < min) ? min : ((val > max) ? max : val);};function round(val, decimalPlaces) {    var multi = Math.pow(10,decimalPlaces);    return Math.round(val * multi)/multi;};function snap(val, snapInc, roundFunction) {    var roundFunction = roundFunction || Math.round;    return round( snapInc * roundFunction(val / snapInc), 2 );};// ------------------------------------------------------------------------function radians(val) {    return val * (Math.PI/180);};// ------------------------------------------------------------------------function distance(point1, point2) {    return Math.sqrt(        Math.pow(point2.x - point1.x, 2) +        Math.pow(point2.y - point1.y, 2)    );};function sortOrder(a, b) {    // if( a.x < b.x || (a.x === b.x && a.y > b.y ) ) {    //     return -1;    // }    // if( a.x === b.x && a.y === b.y) {    //     return 0;    // }    // else {    //     return 1;    // }    if( a.x < b.x || (a.x === b.x && a.y < b.y ) ) return 1;    if( a.x === b.x && a.y === b.y) return 0;    return -1;};function sortByProximity(point, arr) {    // arr.sort(function( a, b ) {    //     return distance(point, a) - distance(point, b);    // });    arr.sort(sortOrder);};// ------------------------------------------------------------------------String.prototype.trimStart = function() {    return this.replace(/^\s\s*/, '');};String.prototype.trimEnd = function() {    return this.replace(/\s\s*$/, '');};String.prototype.trim = function() {    return this.trimStart().trimEnd();};// ------------------------------------------------------------------------var Ease = function() {    return {        /*         * see http://easings.net/de for visual examples         * of each spline method         */        linear: function(t) {            return t;        },        inQuad: function(t) {            return t*t;        },        outQuad: function(t) {            return t*(2-t);        },        inOutQuad: function(t) {            return t<0.5                ? 2*t*t                : -1+(4-2*t)*t;        },        // inOutQuad: function(t) {        //     t *= 2.0;        //     if (t < 1) {        //         return t*t/2.0;        //     }        //     else {        //         --t;        //         return -0.5 * (t*(t-2.0) - 1.0);        //     }        // },        inCubic: function(t) {            return t*t*t;        },        outCubic: function(t) {            return (--t)*t*t+1;        },        inOutCubic: function(t) {            return t<0.5                ? 4*t*t*t                : (t-1)*(2*t-2)*(2*t-2)+1;        },        inQuart: function(t) {            return t*t*t*t;        },        outQuart: function(t) {            return 1-(--t)*t*t*t;        },        inOutQuart: function(t) {            return t<0.5                ? 8*t*t*t*t                : 1-8*(--t)*t*t*t;        },        inQuint: function(t) {            return t*t*t*t*t;        },        outQuint: function(t) {            return 1+(--t)*t*t*t*t;        },        inOutQuint: function(t) {            return t<0.5                ? 16*t*t*t*t*t                : 1+16*(--t)*t*t*t*t;        },        inSine: function(t) {            return -1*Math.cos(t*(Math.PI/2))+1;        },        outSine: function(t) {            return 1*Math.sin(t*(Math.PI/2));        },        inOutSine: function(t) {            return -0.5*(Math.cos(Math.PI*t)-1);        },        inExpo: function(t) {            return 1*Math.pow(2, 10*(t-1));        },        outExpo: function(t) {            return 1*(-Math.pow(2, -10*t)+1 );        },        inOutExpo: function(t) {            t /= 0.5;            if (t < 1) return 0.5 * Math.pow(2, 10*(t-1));            t--;            return 0.5 * (-Math.pow(2, -10*t)+2);        },        inCirc: function(t) {            return -1*(Math.sqrt(1-t*t)-1);        },        outCirc: function(t) {            t--;            return 1*Math.sqrt(1-t*t);        },        inOutCirc: function(t) {            t /= 0.5;            if (t<1) {                return -0.5*(Math.sqrt(1-t*t)-1);            }            else {                t-=2; return 0.5*(Math.sqrt(1-t*t)+1);            }        }    };};// -----------------------------------------------------------------------------////  Setup//(function setup() {    words = poem.split(' ');    $.writeln('words:\t' + words.length);})();////  Draw//(function draw() {    var selected = app.activeDocument.selection;    $.writeln(selected.length);    // var origin = layer.pathItems.ellipse(    //     0, 0,    //     54, 54,    //     false, true    // );    // var color   = new RGBColor();    // color.red   = 0;    // color.green = 170;    // color.blue  = 255;    // origin.fillColor = color;    // gather coords    var coords = [];    for (var i=0; i<selected.length; i++) {        var select = selected[i];        var x = select.left;        var y = select.top;        var w = Math.abs(select.geometricBounds[3] - select.geometricBounds[1]);        var h = Math.abs(select.geometricBounds[2] - select.geometricBounds[0]);        coords.push({            x: x + w/2,            y: y - h/2        });    }    // sort coords on distance from origin    sortByProximity({x: 0, y: 0}, coords);    // temp: number the circles    // for (var i=0; i<coords.length; i++) {    //     // create text frame    //     var x = coords[i].x;    //     var y = coords[i].y;    //     var text = layer.textFrames.pointText([    //         x, y    //     ]);    //     text.textRange.characterAttributes.size = 34;    //     // text.textRange.characterAttributes.textFont = 'Theinhardt';    //     text.contents = i;    // }    // // remove certain coordinates from the mix    // var remove = [    //     0, 3, 8, 15, 27, 39,    //     1, 6, 13, 21, 35, 47,    //     2, 4, 11, 19, 29,    //     5, 9, 17, 26, 3    // ];    // remove.sort();    // for (var i=remove.length-1; i>=0; i--) {    //     coords.splice(remove[i], 1);    // }    // place text    for (var i=0; i<words.length; i++) {        var t = Math.abs(i/(words.length-1));        var e = parseInt( new Ease().inQuad(t) * (coords.length-1) );        // var tX = Math.abs(i/(words.length-1));        // var tY = Math.abs(i/(lines.length-1));        // var easeX = new Ease().inOutQuad(tX);        // var easeY = new Ease().inQuad(tY);        // create text frame        var text = layer.textFrames.pointText([            coords[e].x, coords[e].y        ]);        text.textRange.characterAttributes.size = 34;        // text.textRange.characterAttributes.textFont = 'Theinhardt';        text.contents = words[i];    }})();